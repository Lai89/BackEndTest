{
	"info": {
		"_postman_id": "7f23b097-dfb9-472a-bf61-7cc41b5e8350",
		"name": "BackEndTest",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9972778"
	},
	"item": [
		{
			"name": "PetStoreTest",
			"item": [
				{
					"name": "1.1 GetAvailablePets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"Scenario: Obtain all available pets\r",
									"\r",
									"GIVEN I have a list with all the pets and their status (available, pending or sold)\r",
									"\r",
									"WHEN I select status as available\r",
									"\r",
									"THEN I will obtain the list with all the pets available at the moment\r",
									"*/\r",
									"\r",
									"//Set variables\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Tests\r",
									"//Check status code is OK\r",
									"pm.test(\"Status code is OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Check if the response is an array\r",
									"pm.test(\"The object is an array\", function () {\r",
									"    pm.expect(Array.isArray(jsonData)).to.be.true;\r",
									"    pm.expect(jsonData.length).to.be.above(0);\r",
									"});\r",
									"\r",
									"//Check the properties of the object\r",
									"pm.test(\"Body contains properties\", function () {\r",
									"    var firstItem = jsonData[0];\r",
									"    \r",
									"    pm.expect(firstItem.hasOwnProperty(\"id\")).to.be.true;\r",
									"    pm.expect(firstItem.hasOwnProperty(\"category\")).to.be.true;\r",
									"    pm.expect(firstItem.hasOwnProperty(\"name\")).to.be.true;\r",
									"    pm.expect(firstItem.hasOwnProperty(\"photoUrls\")).to.be.true;\r",
									"    pm.expect(firstItem.hasOwnProperty(\"tags\")).to.be.true;\r",
									"    pm.expect(firstItem.hasOwnProperty(\"status\")).to.be.true;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}v2/pet/findByStatus?status=available",
							"host": [
								"{{url}}v2"
							],
							"path": [
								"pet",
								"findByStatus"
							],
							"query": [
								{
									"key": "status",
									"value": "available"
								}
							]
						},
						"description": "Scenario: Obtain all available pets\r\n\r\n<p>GIVEN I have a list with all the pets and their status (available, pending or sold)</p>\r\n<p>WHEN I select status as available</p>\r\n<p>THEN I will obtain the list with all the pets available at the moment</p>"
					},
					"response": []
				},
				{
					"name": "1.2 PostNewPet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"Scenario: Post a new pet\r",
									"\r",
									"GIVEN I have the description of a new pet available in the store)\r",
									"\r",
									"WHEN I post the new pet\r",
									"\r",
									"THEN I will obtain the object of the new pet\r",
									"*/\r",
									"\r",
									"//Set variables\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Set environment variables for following requests\r",
									"pm.environment.set(\"petId\", jsonData.id);\r",
									"pm.environment.set(\"petStatus\", jsonData.status)\r",
									"\r",
									"//Tests\r",
									"//Check status code is OK\r",
									"pm.test(\"Status code is OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Check id is not null\r",
									"pm.test(\"Id is not null\", function () {\r",
									"    pm.expect(jsonData.id).not.eql(0);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 25,\r\n  \"category\": {\r\n    \"id\": 1,\r\n    \"name\":\"Cat\"\r\n  },\r\n  \"name\": \"Rome\",\r\n  \"photoUrls\": [\r\n    \"https://tse4.mm.bing.net/th?id=OIP.BR2BDP4ZtodY4GI7wEOiVwHaHv&pid=Api\",\r\n    \"http://www.mundogatos.com/Uploads/mundogatos.com/ImagenesGrandes/fotos-de-gatitos-7.jpg\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"kitten\"\r\n    },\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"cute\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}v2/pet",
							"host": [
								"{{url}}v2"
							],
							"path": [
								"pet"
							]
						},
						"description": "Scenario: Post a new pet\n\nGIVEN I have the description of a new pet available in the store)\n\nWHEN I post the new pet\n\nTHEN I will obtain the object of the new pet"
					},
					"response": []
				},
				{
					"name": "1.3 GetNewPetById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"Scenario: Get new pet by id\r",
									"\r",
									"GIVEN a new pet posted on the shop\r",
									"\r",
									"WHEN I find the new pet by Id\r",
									"\r",
									"THEN I will obtain all the information of the new pet\r",
									"*/\r",
									"\r",
									"//Set variables\r",
									"var jsonData = pm.response.json();\r",
									"var petId = pm.environment.get(\"petId\");\r",
									"\r",
									"//Tests\r",
									"//Check status is OK\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Check body id equals new pet id\r",
									"pm.test(\"Body contains expected id\", function () {\r",
									"    pm.expect(jsonData.id).to.eql(petId);\r",
									"});\r",
									"\r",
									"//Check new pet category\r",
									"pm.test(\"Body contains expected Category\", function () {\r",
									"    pm.expect(jsonData.category.name).to.eql(\"Cat\");\r",
									"});\r",
									"\r",
									"//Check new pet name\r",
									"pm.test(\"Body contains expected Pet Name\", function () {\r",
									"    pm.expect(jsonData.name).to.eql(\"Rome\");\r",
									"});\r",
									"\r",
									"//Check how many photo URL has new pet\r",
									"pm.test(\"There are two photo URL\", function () {\r",
									"    pm.expect(jsonData.photoUrls.length).to.eql(2);\r",
									"});\r",
									"\r",
									"//Check how many tags has new pet\r",
									"pm.test(\"There are two tags\", function () {\r",
									"    pm.expect(jsonData.tags.length).to.eql(2);\r",
									"});\r",
									"\r",
									"//Check new pet status\r",
									"pm.test(\"Status is available\", function () {\r",
									"    pm.expect(jsonData.status).to.eql(\"available\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}v2/pet/{{petId}}",
							"host": [
								"{{url}}v2"
							],
							"path": [
								"pet",
								"{{petId}}"
							]
						},
						"description": "Scenario: Get new pet by id\n\nGIVEN a new pet posted on the shop\n\nWHEN I find the new pet by Id\n\nTHEN I will obtain all the information of the new pet"
					},
					"response": []
				},
				{
					"name": "1.4 UpdatePet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"Scenario: Update a pet status to sold\r",
									"\r",
									"GIVEN a pet that has been sold\r",
									"\r",
									"WHEN I send the Id and the status as sold\r",
									"\r",
									"THEN I will obtain the object of the pet with status sold\r",
									"*/\r",
									"\r",
									"//Set variables\r",
									"var jsonData = pm.response.json();\r",
									"var petId = pm.environment.get(\"petId\");\r",
									"\r",
									"//Tests\r",
									"//Check status code is OK\r",
									"pm.test(\"Status code is OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Check response contains the expected Id\r",
									"pm.test(\"Body contains expected Id\", function () {\r",
									"    pm.expect(jsonData.id).to.eql(petId);\r",
									"});\r",
									"\r",
									"//Check pet status is sold\r",
									"pm.test(\"Status is sold\", function () {\r",
									"    pm.expect(jsonData.status).to.eql(\"sold\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{petId}},\r\n    \"status\": \"sold\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}v2/pet",
							"host": [
								"{{url}}v2"
							],
							"path": [
								"pet"
							]
						},
						"description": "Scenario: Update a pet status to sold\n\nGIVEN a pet that has been sold\n\nWHEN I send the Id and the status as sold\n\nTHEN I will obtain the object of the pet with status sold"
					},
					"response": []
				},
				{
					"name": "1.5 GetUpdatedPetById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"Scenario: Get updated by id\r",
									"\r",
									"GIVEN a pet has been updated as sold\r",
									"\r",
									"WHEN I find the updated pet by Id\r",
									"\r",
									"THEN I will obtain all the id and the status of the updated pet\r",
									"*/\r",
									"\r",
									"//Set variables\r",
									"var jsonData = pm.response.json();\r",
									"var petId = pm.environment.get(\"petId\");\r",
									"\r",
									"//Tests\r",
									"//Check status is OK\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Check body id equals expected id\r",
									"pm.test(\"Body contains expected id\", function () {\r",
									"    pm.expect(jsonData.id).to.eql(petId);\r",
									"});\r",
									"\r",
									"//Check status has changed to sold\r",
									"pm.test(\"Status is sold\", function () {\r",
									"    pm.expect(jsonData.status).to.eql(\"sold\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}v2/pet/{{petId}}",
							"host": [
								"{{url}}v2"
							],
							"path": [
								"pet",
								"{{petId}}"
							]
						},
						"description": "Scenario: Get updated by id\n\nGIVEN a pet has been updated as sold\n\nWHEN I find the updated pet by Id\n\nTHEN I will obtain all the id and the status of the updated pet"
					},
					"response": []
				},
				{
					"name": "1.6 DeletePet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"Scenario: Delete a pet\r",
									"\r",
									"GIVEN I want a pet to not be in the inventory anymore\r",
									"\r",
									"WHEN I delete the registry\r",
									"\r",
									"THEN the pet will disappear from the inventory of the pet store.\r",
									"*/\r",
									"\r",
									"//Set variables\r",
									"var jsonData = pm.response.json();\r",
									"var petId = pm.environment.get(\"petId\");\r",
									"\r",
									"//Tests\r",
									"//Status code is OK\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Checked deleted pet id equals expected id\r",
									"pm.test(\"Status is sold\", function () {\r",
									"    pm.expect(jsonData.message).to.eql(String(petId));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "api_key",
								"value": "OAgHj1wNNPRoPDFw9r3bUY4qhTyeCDMO7GzDn8Ak5lgAcy63qEQScTx6brNAgplEJNhUMsjDMbJKWyUdPqphJV2tEEO619KLtBLeK0rKKsjwjG6UPUvC0DhINrYw8QVP",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}v2/pet/{{petId}}",
							"host": [
								"{{url}}v2"
							],
							"path": [
								"pet",
								"{{petId}}"
							]
						},
						"description": "Scenario: Delete a pet\n\nGIVEN I want a pet to not be in the inventory anymore\n\nWHEN I delete the registry\n\nTHEN the pet will disappear from the inventory of the pet store."
					},
					"response": []
				},
				{
					"name": "1.7 DeletePet_NotFound",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/* \r",
									"Scenario: Delete a non-existent pet\r",
									"\r",
									"GIVEN A pet that is no longer in store\r",
									"\r",
									"WHEN I request to delete the id\r",
									"\r",
									"THEN I get a response status 404 Not Found.\r",
									"*/\r",
									"\r",
									"//Tests\r",
									"//Status code is Not Found\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "api_key",
								"value": "OAgHj1wNNPRoPDFw9r3bUY4qhTyeCDMO7GzDn8Ak5lgAcy63qEQScTx6brNAgplEJNhUMsjDMbJKWyUdPqphJV2tEEO619KLtBLeK0rKKsjwjG6UPUvC0DhINrYw8QVP",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}v2/pet/{{petId}}",
							"host": [
								"{{url}}v2"
							],
							"path": [
								"pet",
								"{{petId}}"
							]
						},
						"description": "Scenario: Delete a non-existent pet\n\nGIVEN A pet that is no longer in store\n\nWHEN I request to delete the id\n\nTHEN I get a response status 404 Not Found."
					},
					"response": []
				}
			],
			"description": "#### **1.1 GetAvailablePets**\n\nScenario: Obtain all available pets\n\nGIVEN I have a list with all the pets and their status (available, pending or sold)\n\nWHEN I select status as available\n\nTHEN I will obtain the list with all the pets available at the moment\n\n#### **1.2 PostNewPet**\n\nScenario: Post a new pet\n\nGIVEN I have the description of a new pet available in the store)\n\nWHEN I post the new pet\n\nTHEN I will obtain the object of the new pet\n\n#### 1.3 GetNewPetById\n\nStartFragment\n\nScenario: Get new pet by id\n\nGIVEN a new pet posted on the shop\n\nWHEN I find the new pet by Id\n\nTHEN I will obtain all the information of the new pet\n\nEndFragment\n\n1.4 UpdatePet\n\n1.5 GetUpdatedPetById\n\n1.6 DeletePet\n\n1.7 DeletePet_NotFound",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	]
}